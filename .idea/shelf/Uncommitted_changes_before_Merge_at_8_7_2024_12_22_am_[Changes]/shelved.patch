Index: app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/ProfilePageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.fitnessultimate.loginSignup;\r\n\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.resource.bitmap.CircleCrop;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\n\r\nimport sg.edu.np.mad.fitnessultimate.MainActivity;\r\nimport sg.edu.np.mad.fitnessultimate.R;\r\nimport sg.edu.np.mad.fitnessultimate.calendarPage.BaseActivity;\r\n\r\npublic class ProfilePageActivity extends BaseActivity {\r\n\r\n    private TextView username;\r\n    private TextView email;\r\n    private ImageView backArrow;\r\n    private ImageView profilePicture;\r\n    private RelativeLayout resetPassword;\r\n    private Button editProfileBtn;\r\n\r\n    private FirebaseAuth fAuth;\r\n    private FirebaseFirestore fStore;\r\n    private FirebaseUser user;\r\n    private String userId;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_profile_page);\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\r\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\r\n            return insets;\r\n        });\r\n\r\n        // Initialize views\r\n        username = findViewById(R.id.yourUsername);\r\n        email = findViewById(R.id.yourEmailAddress);\r\n        backArrow = findViewById(R.id.arrow_left1);\r\n        profilePicture = findViewById(R.id.profilePic);\r\n        resetPassword = findViewById(R.id.changePassword);\r\n        editProfileBtn = findViewById(R.id.editProfile);\r\n\r\n        // Initialize Firebase instances\r\n        fAuth = FirebaseAuth.getInstance();\r\n        fStore = FirebaseFirestore.getInstance();\r\n        user = fAuth.getCurrentUser();\r\n        userId = user != null ? user.getUid() : null;\r\n\r\n        // Retrieve and display the profile image\r\n        retrieveProfileImage();\r\n\r\n        DocumentReference documentReference = fStore.collection(\"users\").document(userId);\r\n        documentReference.addSnapshotListener(this, new EventListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable DocumentSnapshot value, @Nullable FirebaseFirestoreException error) {\r\n                if (value != null && value.exists()) { // Check if the document exists\r\n                    String usernameText = value.getString(\"uName\");\r\n                    String emailText = value.getString(\"email\");\r\n                    username.setText(usernameText);\r\n                    email.setText(emailText);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Go back to home page\r\n        backArrow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(ProfilePageActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        // Edit Profile\r\n        editProfileBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Retrieve the current username and email\r\n                String currentUsername = username.getText().toString();\r\n                String currentEmail = email.getText().toString();\r\n\r\n                // Start EditProfilePageActivity and pass the current username and email as extras\r\n                Intent intent = new Intent(ProfilePageActivity.this, EditProfilePageActivity.class);\r\n                intent.putExtra(\"username\", currentUsername);\r\n                intent.putExtra(\"email\", currentEmail);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        // Change Password\r\n        resetPassword.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Inflate the custom layout\r\n                LayoutInflater inflater = LayoutInflater.from(v.getContext());\r\n                View dialogView = inflater.inflate(R.layout.change_password_dialog, null);\r\n\r\n                // Get the EditText from the custom layout\r\n                final EditText resetPassword = dialogView.findViewById(R.id.dialog_input);\r\n\r\n                // Create the AlertDialog and set the custom view\r\n                final AlertDialog.Builder passwordResetDialog = new AlertDialog.Builder(v.getContext());\r\n                //passwordResetDialog.setTitle(\"Reset Password?\");\r\n                passwordResetDialog.setView(dialogView);\r\n\r\n                passwordResetDialog.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        // Extract the new password and attempt to update it\r\n                        String newPassword = resetPassword.getText().toString();\r\n                        if (newPassword.length() < 6) {\r\n                            Toast.makeText(ProfilePageActivity.this, \"Password must be longer than 6 characters.\", Toast.LENGTH_SHORT).show();\r\n                            return;\r\n                        }\r\n\r\n                        user.updatePassword(newPassword).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                            @Override\r\n                            public void onSuccess(Void aVoid) {\r\n                                Toast.makeText(ProfilePageActivity.this, \"Password Reset Successfully.\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }).addOnFailureListener(new OnFailureListener() {\r\n                            @Override\r\n                            public void onFailure(@NonNull Exception e) {\r\n                                Toast.makeText(ProfilePageActivity.this, \"Password Reset Failed.\", Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                passwordResetDialog.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        // Close the dialog\r\n                    }\r\n                });\r\n\r\n                passwordResetDialog.create().show();\r\n            }\r\n        });\r\n    }\r\n    public void logout(View view) {\r\n        // Sign out from Firebase\r\n        FirebaseAuth.getInstance().signOut();\r\n\r\n        // Sign out from Google\r\n        if (LoginPageActivity.client != null) {\r\n            // Clear any existing sessions or cached credentials\r\n            LoginPageActivity.client.revokeAccess().addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<Void> task) {\r\n                    if (task.isSuccessful()) {\r\n                        // After revoking access, sign out from Google\r\n                        LoginPageActivity.client.signOut().addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                            @Override\r\n                            public void onComplete(@NonNull Task<Void> task) {\r\n                                // After signing out from Google, navigate to login page\r\n                                startActivity(new Intent(ProfilePageActivity.this, MainActivity.class));\r\n                                finish();\r\n                            }\r\n                        });\r\n                    } else {\r\n                        // Handle case where revoking access failed\r\n                        // Redirect to login page\r\n                        startActivity(new Intent(ProfilePageActivity.this, LoginPageActivity.class));\r\n                        finish();\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // Handle case where GoogleSignInClient is not initialized\r\n            // This may happen if the user did not sign in with Google\r\n            // Redirect to login page\r\n            startActivity(new Intent(ProfilePageActivity.this, LoginPageActivity.class));\r\n            finish();\r\n        }\r\n    }\r\n    public void retrieveProfileImage() {\r\n        if (user != null) {\r\n            // Retrieve the user document from Firestore\r\n            DocumentReference userRef = fStore.collection(\"users\").document(user.getUid());\r\n            userRef.get().addOnSuccessListener(documentSnapshot -> {\r\n                if (documentSnapshot.exists()) {\r\n                    // Extract the image URL from the user document\r\n                    String imageUrl = documentSnapshot.getString(\"profileImageUrl\");\r\n\r\n                    // Load the image into ImageView using Glide\r\n                    Glide.with(this)\r\n                            .load(imageUrl)\r\n                            .placeholder(R.drawable.baseline_account_circle_24) // Placeholder image while loading\r\n                            .fitCenter()\r\n                            .transform(new CircleCrop())\r\n                            .into(profilePicture);\r\n                } else {\r\n                    // Handle case where user document does not exist\r\n                    Toast.makeText(ProfilePageActivity.this, \"User document does not exist.\", Toast.LENGTH_SHORT).show();\r\n                }\r\n            }).addOnFailureListener(e -> {\r\n                // Handle any errors that occur while fetching user document\r\n                Toast.makeText(ProfilePageActivity.this, \"Failed to retrieve profile image: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n            });\r\n        }\r\n    }\r\n\r\n    // Method to retrieve user information from Firestore\r\n    private void retrieveUserInfoFromFirestore(String email) {\r\n        fStore.collection(\"users\").whereEqualTo(\"email\", email)\r\n                .get()\r\n                .addOnSuccessListener(queryDocumentSnapshots -> {\r\n                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {\r\n                        // Retrieve user information from Firestore\r\n                        String username = document.getString(\"username\");\r\n                        String profilePictureUrl = document.getString(\"profilePictureUrl\");\r\n\r\n                        // Update UI with retrieved information\r\n                        updateUI(username, email, profilePictureUrl);\r\n                    }\r\n                })\r\n                .addOnFailureListener(e -> {\r\n                    // Handle failure\r\n                });\r\n    }\r\n\r\n    // Method to update UI with user information\r\n    private void updateUI(String usernameText, String emailText, String profilePictureUrl) {\r\n        // Update TextViews for username and email\r\n        username.setText(usernameText);\r\n        email.setText(emailText);\r\n\r\n        // Load profile picture using Glide or any other image loading library\r\n        Glide.with(this)\r\n                .load(profilePictureUrl)\r\n                .placeholder(R.drawable.baseline_account_circle_24) // Placeholder image while loading\r\n                .into(profilePicture);\r\n    }\r\n\r\n    // Call retrieveUserInfoFromFirestore method in the login process\r\n    private void login(String email, String password) {\r\n        fAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this, task -> {\r\n                    if (task.isSuccessful()) {\r\n                        // Sign in success, retrieve user information from Firestore\r\n                        retrieveUserInfoFromFirestore(email);\r\n                    } else {\r\n                        // Handle login failure\r\n                        Toast.makeText(this, \"Authentication failed.\",\r\n                                Toast.LENGTH_SHORT).show();\r\n                    }\r\n                });\r\n    }\r\n}
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/ProfilePageActivity.java b/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/ProfilePageActivity.java
--- a/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/ProfilePageActivity.java	
+++ b/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/ProfilePageActivity.java	
@@ -39,6 +39,7 @@
 import sg.edu.np.mad.fitnessultimate.MainActivity;
 import sg.edu.np.mad.fitnessultimate.R;
 import sg.edu.np.mad.fitnessultimate.calendarPage.BaseActivity;
+import sg.edu.np.mad.fitnessultimate.waterTracker.ReminderActivity;
 
 public class ProfilePageActivity extends BaseActivity {
 
@@ -47,6 +48,7 @@
     private ImageView backArrow;
     private ImageView profilePicture;
     private RelativeLayout resetPassword;
+    private  RelativeLayout waterReminderBtn;
     private Button editProfileBtn;
 
     private FirebaseAuth fAuth;
@@ -72,6 +74,7 @@
         profilePicture = findViewById(R.id.profilePic);
         resetPassword = findViewById(R.id.changePassword);
         editProfileBtn = findViewById(R.id.editProfile);
+        waterReminderBtn = findViewById(R.id.waterReminder);
 
         // Initialize Firebase instances
         fAuth = FirebaseAuth.getInstance();
@@ -170,6 +173,14 @@
                 passwordResetDialog.create().show();
             }
         });
+
+        waterReminderBtn.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(ProfilePageActivity.this, ReminderActivity.class);
+                startActivity(intent);
+            }
+        });
     }
     public void logout(View view) {
         // Sign out from Firebase
Index: app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/LoginPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.fitnessultimate.loginSignup;\r\n\r\nimport android.app.Activity;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.activity.result.ActivityResult;\r\nimport androidx.activity.result.ActivityResultCallback;\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\n\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn;\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount;\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient;\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions;\r\nimport com.google.android.gms.common.SignInButton;\r\nimport com.google.android.gms.common.api.ApiException;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.textfield.TextInputLayout;\r\nimport com.google.firebase.auth.AuthCredential;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.GoogleAuthProvider;\r\n\r\nimport sg.edu.np.mad.fitnessultimate.MainActivity;\r\nimport sg.edu.np.mad.fitnessultimate.R;\r\nimport sg.edu.np.mad.fitnessultimate.calendarPage.BaseActivity;\r\n\r\n\r\npublic class LoginPageActivity extends BaseActivity {\r\n\r\n    //public static final int GOOGLE_SIGN_IN_CODE = 1234;\r\n    public static GoogleSignInClient client; // Declare client as static\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_login_page);\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\r\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\r\n            return insets;\r\n        });\r\n\r\n        EditText mEmailUsername = findViewById(R.id.inputEmailUsername);\r\n        EditText mPassword = findViewById(R.id.inputLoginPassword);\r\n        Button mSignInBtn = findViewById(R.id.button_signIn);\r\n        TextView mForgotPassword = findViewById(R.id.forgotPassword);\r\n\r\n        TextInputLayout mtextInputLayoutEmailUsername = findViewById(R.id.textInputEmailUsername);\r\n        TextInputLayout mtextInputLoginPassword = findViewById(R.id.textInputLoginPassword);\r\n\r\n        ProgressBar mLoginProgressBar = findViewById(R.id.loginProgressBar);\r\n        FirebaseAuth fAuthLogin = FirebaseAuth.getInstance();\r\n\r\n        ImageView btnArrow1 = findViewById(R.id.arrow_left1);\r\n        TextView registerNow = findViewById(R.id.registerNow);\r\n\r\n\r\n        btnArrow1.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Go back to the Main page when the left arrow button is clicked\r\n                Intent intent = new Intent(LoginPageActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        registerNow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Go back to the Main page when the left arrow button is clicked\r\n                Intent intent = new Intent(LoginPageActivity.this, SignUpPageActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        mForgotPassword.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                LayoutInflater inflater = LayoutInflater.from(v.getContext());\r\n                View dialogView = inflater.inflate(R.layout.reset_password_dialog, null);\r\n\r\n                EditText resetMail = dialogView.findViewById(R.id.resetMail);\r\n\r\n                AlertDialog.Builder passwordResetDialog = new AlertDialog.Builder(v.getContext());\r\n                passwordResetDialog.setView(dialogView);\r\n\r\n                passwordResetDialog.setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        String mail = resetMail.getText().toString();\r\n                        if (!mail.isEmpty()) {\r\n                            fAuthLogin.sendPasswordResetEmail(mail).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                @Override\r\n                                public void onSuccess(Void unused) {\r\n                                    Toast.makeText(LoginPageActivity.this, \"Reset Link Sent To Your Email.\", Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }).addOnFailureListener(new OnFailureListener() {\r\n                                @Override\r\n                                public void onFailure(@NonNull Exception e) {\r\n                                    Toast.makeText(LoginPageActivity.this, \"Error! Reset Link is Not Sent. \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            });\r\n                        } else {\r\n                            Toast.makeText(LoginPageActivity.this, \"Please enter your email address.\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                passwordResetDialog.setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        // close the dialog\r\n                    }\r\n                });\r\n\r\n                passwordResetDialog.create().show();\r\n            }\r\n        });\r\n\r\n        mSignInBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                String emailUsername = mEmailUsername.getText().toString().trim();\r\n                String password = mPassword.getText().toString().trim();\r\n\r\n                if (TextUtils.isEmpty(emailUsername)) {\r\n                    mEmailUsername.setError(\"Username is Required.\");\r\n                    return;\r\n                }\r\n\r\n                // Check if the input is a valid email address\r\n                if (!android.util.Patterns.EMAIL_ADDRESS.matcher(emailUsername).matches()) {\r\n                    mEmailUsername.setError(\"Invalid Email Address\");\r\n                    return;\r\n                }\r\n\r\n                if (TextUtils.isEmpty(password)) {\r\n                    mtextInputLoginPassword.setEndIconMode(TextInputLayout.END_ICON_NONE); // Hide the end icon\r\n                    mPassword.setError(\"Password is Required.\");\r\n                    return;\r\n                } else {\r\n                    // If there is no error, make the end icon visible\r\n                    mtextInputLoginPassword.setEndIconMode(TextInputLayout.END_ICON_PASSWORD_TOGGLE);\r\n                }\r\n\r\n\r\n                mLoginProgressBar.setVisibility(View.VISIBLE);\r\n\r\n                // authenticate the user\r\n                fAuthLogin.signInWithEmailAndPassword(emailUsername, password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (task.isSuccessful()) {\r\n                            Toast.makeText(LoginPageActivity.this, \"Login Successful\", Toast.LENGTH_SHORT).show();\r\n                            startActivity(new Intent(getApplicationContext(), MainActivity.class));\r\n                        } else {\r\n                            Toast.makeText(LoginPageActivity.this, \"Error! \" + task.getException().getMessage(), Toast.LENGTH_SHORT).show();\r\n                            mLoginProgressBar.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        SignInButton googleSignIn = findViewById(R.id.googleLogo);\r\n        GoogleSignInOptions options = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n                .requestIdToken(getString(R.string.default_web_client_id))\r\n                .requestEmail()\r\n                .build();\r\n\r\n        client = GoogleSignIn.getClient(this, options);\r\n        googleSignIn.setOnClickListener(view -> {\r\n            // Intent intent = client.getSignInIntent();\r\n\r\n            resultLauncher.launch(new Intent(client.getSignInIntent()));\r\n            // startActivityForResult(intent, 1234);\r\n        });\r\n    }\r\n\r\n    ActivityResultLauncher<Intent> resultLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), new ActivityResultCallback<ActivityResult>() {\r\n        @Override\r\n        public void onActivityResult(ActivityResult result) {\r\n            if (result.getResultCode() == Activity.RESULT_OK) {\r\n                Intent data = result.getData();\r\n\r\n                Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);\r\n                try {\r\n                    GoogleSignInAccount account = task.getResult(ApiException.class);\r\n\r\n                    AuthCredential credential = GoogleAuthProvider.getCredential(account.getIdToken(), null);\r\n                    FirebaseAuth.getInstance().signInWithCredential(credential)\r\n                            .addOnCompleteListener(task1 -> {\r\n                                if (task1.isSuccessful()) {\r\n                                    Toast.makeText(LoginPageActivity.this, \"Login Successful\", Toast.LENGTH_SHORT).show();\r\n                                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);\r\n                                    startActivity(intent);\r\n                                    finish();\r\n                                } else {\r\n                                    Toast.makeText(LoginPageActivity.this, task1.getException().getMessage(), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            });\r\n                } catch (ApiException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    });\r\n}
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/LoginPageActivity.java b/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/LoginPageActivity.java
--- a/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/LoginPageActivity.java	
+++ b/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/LoginPageActivity.java	
@@ -63,12 +63,11 @@
             return insets;
         });
 
-        EditText mEmailUsername = findViewById(R.id.inputEmailUsername);
+        EditText mEmail = findViewById(R.id.inputEmail);
         EditText mPassword = findViewById(R.id.inputLoginPassword);
         Button mSignInBtn = findViewById(R.id.button_signIn);
         TextView mForgotPassword = findViewById(R.id.forgotPassword);
 
-        TextInputLayout mtextInputLayoutEmailUsername = findViewById(R.id.textInputEmailUsername);
         TextInputLayout mtextInputLoginPassword = findViewById(R.id.textInputLoginPassword);
 
         ProgressBar mLoginProgressBar = findViewById(R.id.loginProgressBar);
@@ -143,17 +142,17 @@
         mSignInBtn.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                String emailUsername = mEmailUsername.getText().toString().trim();
+                String emailUsername = mEmail.getText().toString().trim();
                 String password = mPassword.getText().toString().trim();
 
                 if (TextUtils.isEmpty(emailUsername)) {
-                    mEmailUsername.setError("Username is Required.");
+                    mEmail.setError("Username is Required.");
                     return;
                 }
 
                 // Check if the input is a valid email address
                 if (!android.util.Patterns.EMAIL_ADDRESS.matcher(emailUsername).matches()) {
-                    mEmailUsername.setError("Invalid Email Address");
+                    mEmail.setError("Invalid Email Address");
                     return;
                 }
 
Index: app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/EditProfilePageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sg.edu.np.mad.fitnessultimate.loginSignup;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.activity.BackEventCompat;\r\nimport androidx.activity.EdgeToEdge;\r\nimport androidx.activity.result.ActivityResultCallback;\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport androidx.core.graphics.Insets;\r\nimport androidx.core.view.ViewCompat;\r\nimport androidx.core.view.WindowInsetsCompat;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.resource.bitmap.CircleCrop;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport sg.edu.np.mad.fitnessultimate.calendarPage.BaseActivity;\r\nimport sg.edu.np.mad.fitnessultimate.loginSignup.ProfilePageActivity;\r\nimport sg.edu.np.mad.fitnessultimate.R;\r\n\r\npublic class EditProfilePageActivity extends BaseActivity {\r\n    ImageView leftArrow;\r\n    ImageView changeProfilePic;\r\n    EditText resetUsername;\r\n    EditText resetEmail;\r\n\r\n    Button saveButton;\r\n\r\n    FirebaseAuth fAuth;\r\n    FirebaseFirestore fStore;\r\n    FirebaseUser user;\r\n    StorageReference storageReference;\r\n    Uri imageUri;\r\n\r\n    private ActivityResultLauncher<String> galleryLauncher;\r\n    // Declare global variables to store original values\r\n    private String originalUsername;\r\n    private String originalEmail;\r\n\r\n    // Method to retrieve the profile image URI\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        EdgeToEdge.enable(this);\r\n        setContentView(R.layout.activity_edit_profile_page);\r\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {\r\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\r\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\r\n            return insets;\r\n        });\r\n\r\n        // Initialize views and Firebase instances after setting the content view\r\n        leftArrow = findViewById(R.id.arrow_left1);\r\n        changeProfilePic = findViewById(R.id.editProfilePic);\r\n        resetUsername = findViewById(R.id.inputUsername);\r\n        resetEmail = findViewById(R.id.inputEmail);\r\n\r\n        fAuth = FirebaseAuth.getInstance();\r\n        fStore = FirebaseFirestore.getInstance();\r\n        user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        storageReference = FirebaseStorage.getInstance().getReference();\r\n        saveButton = findViewById(R.id.saveBtn);\r\n\r\n        Intent data = getIntent();\r\n        String username = data.getStringExtra(\"username\");\r\n        String email = data.getStringExtra(\"email\");\r\n\r\n        resetUsername.setText(username);\r\n        resetEmail.setText(email);\r\n        // Retrieve image URL from Firestore and load image into ImageView\r\n        retrieveProfileImage();\r\n\r\n        // Retrieve original values of username and email\r\n        originalUsername = resetUsername.getText().toString();\r\n        originalEmail = resetEmail.getText().toString();\r\n\r\n        // Disable save button initially if no changes\r\n        saveButton.setEnabled(false);\r\n        saveButton.setBackgroundColor(ContextCompat.getColor(this, R.color.disabledButtonColor));\r\n\r\n        // Add TextChangedListener to EditText fields to enable/disable save button based on changes\r\n        resetUsername.addTextChangedListener(textWatcher);\r\n        resetEmail.addTextChangedListener(textWatcher);\r\n\r\n        leftArrow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Go back to the Main page when the left arrow button is clicked\r\n                Intent intent = new Intent(EditProfilePageActivity.this, ProfilePageActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        saveButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Retrieve text from EditText fields\r\n                String usernameText = resetUsername.getText().toString();\r\n                String emailText = resetEmail.getText().toString();\r\n\r\n                // Check if any field is empty\r\n                if (TextUtils.isEmpty(usernameText) || TextUtils.isEmpty(emailText)) {\r\n                    Toast.makeText(EditProfilePageActivity.this, \"One or Many Fields are Empty.\", Toast.LENGTH_SHORT).show();\r\n                    return; // Stop further execution\r\n                }\r\n\r\n                // Check if the new email is different from the current email\r\n                boolean isEmailEdited = !user.getEmail().equals(emailText);\r\n\r\n                if (isEmailEdited) {\r\n                    user.verifyBeforeUpdateEmail(emailText).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<Void> emailTask) {\r\n                            if (emailTask.isSuccessful()) {\r\n                                // Email verification sent to new email\r\n                                Toast.makeText(EditProfilePageActivity.this, \"Verification email sent to \" + emailText + \". Please verify to complete the update.\", Toast.LENGTH_SHORT).show();\r\n                                // No need to call sendEmailVerification() here\r\n\r\n                                // Inform the user to check their new email and complete the verification\r\n                                // The actual email update will be handled by Firebase upon email verification\r\n                                updateProfile(usernameText, emailText, true);\r\n                                startActivity(new Intent(EditProfilePageActivity.this, ProfilePageActivity.class));\r\n                                finish(); // Finish current activity\r\n                            } else {\r\n                                // Error sending verification email\r\n                                Toast.makeText(EditProfilePageActivity.this, \"Failed to send verification email: \" + emailTask.getException().getMessage(), Toast.LENGTH_SHORT).show();\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    updateProfile(usernameText, emailText, true);\r\n                    startActivity(new Intent(EditProfilePageActivity.this, ProfilePageActivity.class));\r\n                    finish(); // Finish current activity\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        // Initialize the ActivityResultLauncher\r\n        galleryLauncher = registerForActivityResult(new ActivityResultContracts.GetContent(), new ActivityResultCallback<Uri>() {\r\n            @Override\r\n            public void onActivityResult(Uri result) {\r\n                if (result != null) {\r\n                    // Handle the selected image URI\r\n                    changeProfilePic.setImageURI(result);\r\n                    Toast.makeText(EditProfilePageActivity.this, \"Profile Picture Updated\", Toast.LENGTH_SHORT).show();\r\n\r\n                    // Load the new image with Glide and apply circleCrop transformation\r\n                    Glide.with(EditProfilePageActivity.this)\r\n                            .load(result)\r\n                            .circleCrop()\r\n                            .placeholder(R.drawable.baseline_account_circle_24) // Placeholder image\r\n                            .into(changeProfilePic);\r\n\r\n                    // Upload the new image to Firebase Storage and update profile in Firestore\r\n                    uploadImageToFirebase(result);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Set OnClickListener for changing profile picture\r\n        changeProfilePic.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // Open gallery to select a profile picture\r\n                galleryLauncher.launch(\"image/*\");\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // TextWatcher to listen for changes in EditText fields\r\n    private TextWatcher textWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            // Check if EditText fields are modified\r\n            if (!resetUsername.getText().toString().equals(originalUsername) ||\r\n                    !resetEmail.getText().toString().equals(originalEmail)) {\r\n                // Enable save button if there are changes and set blue background\r\n                saveButton.setEnabled(true);\r\n                saveButton.setBackgroundColor(ContextCompat.getColor(EditProfilePageActivity.this, R.color.enabledButtonColor));\r\n            } else {\r\n                // Disable save button if no changes and set grey background\r\n                saveButton.setEnabled(false);\r\n                saveButton.setBackgroundColor(ContextCompat.getColor(EditProfilePageActivity.this, R.color.disabledButtonColor));\r\n            }\r\n        }\r\n\r\n    };\r\n    private void uploadImageToFirebase(Uri imageUri) {\r\n        StorageReference fileRef = storageReference.child(\"users/\" + fAuth.getCurrentUser().getUid() + \"/profile.jpg\");\r\n        fileRef.putFile(imageUri)\r\n                .addOnSuccessListener(taskSnapshot -> {\r\n                    // Get the download URL of the uploaded image\r\n                    fileRef.getDownloadUrl().addOnSuccessListener(downloadUri -> {\r\n                        // Update the user profile in Firestore with the image URL\r\n                        updateProfileImageInFirestore(downloadUri.toString());\r\n                        Toast.makeText(EditProfilePageActivity.this, \"Image Uploaded Successfully\", Toast.LENGTH_SHORT).show();\r\n                    }).addOnFailureListener(e -> {\r\n                        Toast.makeText(EditProfilePageActivity.this, \"Failed to get download URL.\", Toast.LENGTH_SHORT).show();\r\n                    });\r\n                })\r\n                .addOnFailureListener(e -> {\r\n                    Toast.makeText(EditProfilePageActivity.this, \"Image Upload Failed: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n                });\r\n    }\r\n    private void updateProfileImageInFirestore(String imageUrl) {\r\n        // Update the 'profileImageUrl' field in Firestore with the image URL\r\n        DocumentReference docRef = fStore.collection(\"users\").document(user.getUid());\r\n        docRef.update(\"profileImageUrl\", imageUrl)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        // Profile image URL updated successfully in Firestore\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        // Failed to update profile image URL in Firestore\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void retrieveProfileImage() {\r\n        if (user != null) {\r\n            // Retrieve the user document from Firestore\r\n            DocumentReference userRef = fStore.collection(\"users\").document(user.getUid());\r\n            userRef.get().addOnSuccessListener(documentSnapshot -> {\r\n                if (documentSnapshot.exists()) {\r\n                    // Extract the image URL and email from the user document\r\n                    String imageUrl = documentSnapshot.getString(\"profileImageUrl\");\r\n                    String email = documentSnapshot.getString(\"email\");\r\n                    String username = documentSnapshot.getString(\"uName\");\r\n\r\n                    // Load the image into ImageView using Glide\r\n                    Glide.with(this)\r\n                            .load(imageUrl)\r\n                            .placeholder(R.drawable.baseline_account_circle_24) // Placeholder image while loading\r\n                            .fitCenter()\r\n                            .transform(new CircleCrop())\r\n                            .into(changeProfilePic);\r\n\r\n                    // Update the EditText fields with the retrieved values\r\n                    resetUsername.setText(username);\r\n                    resetEmail.setText(email);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    //updating user information in Firestore\r\n    private void updateEmailInFirestore(String newEmail, boolean isEmailEdited) {\r\n        if (isEmailEdited) {\r\n            FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n            if (currentUser != null) {\r\n                DocumentReference userRef = FirebaseFirestore.getInstance().collection(\"users\").document(currentUser.getUid());\r\n                userRef.update(\"email\", newEmail).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<Void> task) {\r\n                        if (task.isSuccessful()) {\r\n                            // Email updated successfully in Firestore\r\n                        } else {\r\n                            // Error updating email in Firestore\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updateProfile(String usernameText, String emailText, boolean isEmailEdited) {\r\n        DocumentReference docRef = fStore.collection(\"users\").document(user.getUid());\r\n        Map<String, Object> edited = new HashMap<>();\r\n        edited.put(\"email\", emailText);\r\n        edited.put(\"uName\", usernameText);\r\n        docRef.update(edited).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n            @Override\r\n            public void onSuccess(Void unused) {\r\n                Toast.makeText(EditProfilePageActivity.this, \"Profile Updated\", Toast.LENGTH_SHORT).show();\r\n                startActivity(new Intent(getApplicationContext(), ProfilePageActivity.class));\r\n                finish();\r\n            }\r\n        }).addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception e) {\r\n                Toast.makeText(EditProfilePageActivity.this, \"Failed to update profile: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/EditProfilePageActivity.java b/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/EditProfilePageActivity.java
--- a/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/EditProfilePageActivity.java	
+++ b/app/src/main/java/sg/edu/np/mad/fitnessultimate/loginSignup/EditProfilePageActivity.java	
@@ -160,8 +160,6 @@
                                 // Inform the user to check their new email and complete the verification
                                 // The actual email update will be handled by Firebase upon email verification
                                 updateProfile(usernameText, emailText, true);
-                                startActivity(new Intent(EditProfilePageActivity.this, ProfilePageActivity.class));
-                                finish(); // Finish current activity
                             } else {
                                 // Error sending verification email
                                 Toast.makeText(EditProfilePageActivity.this, "Failed to send verification email: " + emailTask.getException().getMessage(), Toast.LENGTH_SHORT).show();
@@ -169,9 +167,7 @@
                         }
                     });
                 } else {
-                    updateProfile(usernameText, emailText, true);
-                    startActivity(new Intent(EditProfilePageActivity.this, ProfilePageActivity.class));
-                    finish(); // Finish current activity
+                    updateProfile(usernameText, emailText, false);
                 }
             }
         });
@@ -298,7 +294,7 @@
         }
     }
     //updating user information in Firestore
-    private void updateEmailInFirestore(String newEmail, boolean isEmailEdited) {
+    private void updateEmailI4nFirestore(String newEmail, boolean isEmailEdited) {
         if (isEmailEdited) {
             FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
             if (currentUser != null) {
